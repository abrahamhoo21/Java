CREATE OR REPLACE TRIGGER trg_check_refund_amount
BEFORE INSERT ON Cancellation
FOR EACH ROW
DECLARE
    v_paymentAmount NUMBER;
    v_paymentStatus VARCHAR2(20);
BEGIN
    -- Fetch payment details and check the bookingId
    BEGIN
        SELECT paymentAmount, paymentStatus
        INTO v_paymentAmount, v_paymentStatus
        FROM Payment
        WHERE bookingId = :NEW.bookingId;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20005, 'No valid payment found for booking ID ' || :NEW.bookingId);
    END;

    -- Validate payment status and refund amount
    IF v_paymentStatus != 'Paid' THEN
        RAISE_APPLICATION_ERROR(-20006, 'Payment for booking ID ' || :NEW.bookingId || ' is not marked as "Paid".');
    ELSIF :NEW.refundAmount != v_paymentAmount THEN
        RAISE_APPLICATION_ERROR(-20004, 'Refund amount (' || :NEW.refundAmount || 
                                ') does not match payment amount (' || v_paymentAmount || 
                                ') for booking ID ' || :NEW.bookingId || '.');
    END IF;

    -- Auto-generate cancellationId if not provided
    :NEW.cancellationId := NVL(:NEW.cancellationId, 'CL' || TO_CHAR(cancellation_seq.NEXTVAL, 'FM000'));

    -- Update payment status to 'Refunded' 
    IF v_paymentStatus != 'Refunded' THEN
        UPDATE Payment
        SET paymentStatus = 'Refunded'
        WHERE bookingId = :NEW.bookingId;
    END IF;

    -- Log success message
    DBMS_OUTPUT.PUT_LINE('Refund successfully processed for booking ID ' || :NEW.bookingId || '.');

END;
/

